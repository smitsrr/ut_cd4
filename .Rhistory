races_tidy3 <- xml %>%
xml_find_all('//Contest') %>%
xml_attrs()
races_tidy3
races_tidy3 <- xml %>%
xml_find_all('//Contest') %>%
map_df(~flatten(xml_attrs()))
races_tidy3 <- xml %>%
xml_find_all('//Contest') %>%
map_df(~flatten(xml_attrs(.x)))
races_tidy3 <- xml %>%
xml_find_all('//Contest') %>%
map_df(~flatten(c(xml_attrs(.x))))
races_tidy3 <- xml %>%
xml_find_all('//Contest') %>%
xml_attrs() %>%
flatten()
races_tidy3
races_tidy3 <- xml %>%
xml_find_all('//Contest') %>%
map_df(~flatten(c(xml_attrs(.x),
map(xml_children(.x),
~set_names(as.list(xml_text(.x)), xml_name(.x)))))) %>%
type_convert()
races_tidy3
url<- "https://github.com/openelections/openelections-data-ut/raw/master/2018/20181106__ut__general__salt_lake__precinct.csv"
cd4<- download.file(url, 'slco_districts.csv')
# url<- "https://github.com/openelections/openelections-data-ut/raw/master/2018/20181106__ut__general__salt_lake__precinct.csv"
download.file(url, 'slco_districts.csv')
cd4<- read.csv('slco_districts.csv', stringsAsFactors = F)
head(cd4)
table(office)
table(cd4$office)
office<- cd4%>%
group_by(office) %>%
tally()
library(tigris)
library(leaflet)
library(rlist)
library(dplyr)
library(rgdal)    # for readOGR(...)
library(tidyverse)
office<- cd4 %>%
group_by(office) %>%
tally()
View(office)
head(cd4)
# #url<- "https://github.com/openelections/openelections-data-ut/raw/master/2018/20181106__ut__general__salt_lake__precinct.csv"
# #download.file(url, 'slco_districts.csv')
slco<- read.csv('slco_districts.csv', stringsAsFactors = F)
head(slco)
office<- slco %>%
filter(candidate %in% c('Mitt Romney', 'Jenny Wilson') |
candidate == 'DEMOCRATIC' | candidate == 'REPUBLICAN') %>%
group_by(party) %>%
tally()
View(office)
office<- slco %>%
filter(candidate %in% c('Mitt Romney', 'Jenny Wilson') |
candidate == 'DEMOCRATIC' | candidate == 'REPUBLICAN') %>%
group_by(party) %>%
summarise(vote = sum(votes))
office
table(slco$candidate)
office<- slco %>%
filter(candidate %in% c('MITT ROMNEY', 'JENNY WILSON') |
candidate == 'DEMOCRATIC' | candidate == 'REPUBLICAN') %>%
group_by(party) %>%
summarise(vote = sum(votes))
office
slco %>%
filter(candidate %in% c('MITT ROMNEY', 'JENNY WILSON') |
candidate == 'DEMOCRATIC' | candidate == 'REPUBLICAN')
smry<- slco %>%
filter(candidate %in% c('MITT ROMNEY', 'JENNY WILSON') |
candidate == 'DEMOCRATIC' | candidate == 'REPUBLICAN')
View(smry)
table(smry$office)
table(smry$party)
sum(smry$votes)
smry<- slco %>%
filter(candidate %in% c('MITT ROMNEY', 'JENNY WILSON'))
sum(smry$votes)
# Sanity check to make sure vote counts match elections website
slco %>%
filter(candidate %in% c('MITT ROMNEY', 'JENNY WILSON')) %>%
group_by(party) %>%
summarise(vote = sum(votes))
# Sanity check to make sure vote counts match elections website
slco %>%
filter(candidate %in% c('MITT ROMNEY', 'JENNY WILSON')) %>%
group_by(candidate) %>%
summarise(vote = sum(votes))
# Sanity check to make sure vote counts match elections website
slco %>%
filter(candidate %in% c('SHIREEN GHORBANI', 'CHRIS STEWART')) %>%
group_by(candidate) %>%
summarise(vote = sum(votes))
table(slco$office)
# Sanity check to make sure vote counts match elections website
slco %>%
filter(office %in% c('U.S. SENATE', 'PROPOSITION NUMBER 2',
'U.S. REPRESENTATIVE DISTRICT #4')) %>%
group_by(candidate) %>%
summarise(vote = sum(votes))
# Sanity check to make sure vote counts match elections website
slco %>%
filter(office %in% c('U.S. SENATE', 'PROPOSITION NUMBER 2',
'U.S. REPRESENTATIVE DISTRICT #4')) %>%
group_by(office, candidate) %>%
summarise(vote = sum(votes))
# Sanity check to make sure vote counts match elections website
slco %>%
filter(office %in% c('U.S. SENATE', 'PROPOSITION NUMBER 2',
'U.S. REPRESENTATIVE DISTRICT #4')) %>%
group_by(office, candidate) %>%
summarise(vote = sum(votes)) %>%
arrange(office, vote)
# Sanity check to make sure vote counts match elections website
slco %>%
filter(office %in% c('U.S. SENATE', 'PROPOSITION NUMBER 2',
'U.S. REPRESENTATIVE DISTRICT #4')) %>%
group_by(office, candidate) %>%
summarise(vote = sum(votes)) %>%
arrange(office, desc(vote))
head(fips_codes)
####################################################################
#MAPPING
# fips_codes is a built-in r dataset
utah_counties<- filter(fips_codes, fips_codes$state_name == 'Utah')
utah_counties<- filter(utah_counties, utah_counties$county %in% c("Utah County",
"Salt Lake County",
"Juab County",
"Sanpete County"))
head(fips_codes)
####################################################################
#MAPPING
# fips_codes is a built-in r dataset
utah_counties<- filter(fips_codes, fips_codes$county %in% c("Utah County",
"Salt Lake County",
"Juab County",
"Sanpete County"))
ut<- voting_districts("Utah") #Becomes a Large SpatialPolygonsDataFrame
#filter that polygon to only the counties we're going to analyze
ut_data<- ut[ut@data$COUNTYFP10 %in% utah_counties$county_code,]
ut_info<- data.frame(ut_data@data)
head(ut_info)
####################################################################
#MAPPING
# fips_codes is a built-in r dataset
utah_counties<- filter(fips_codes, fips_codes$county %in% c("Utah County",
"Salt Lake County")) # "Juab County", "Sanpete County"
ut<- voting_districts("Utah") #Becomes a Large SpatialPolygonsDataFrame
#filter that polygon to only the counties we're going to analyze
ut_data<- ut[ut@data$COUNTYFP10 %in% utah_counties$county_code,]
ut_info<- data.frame(ut_data@data)
head(ut_info)
####################################################################
#MAPPING
# fips_codes is a built-in r dataset
utah_counties<- filter(fips_codes, fips_codes$county %in% c("Salt Lake County"))
#filter that polygon to only the counties we're going to analyze
ut_data<- ut[ut@data$COUNTYFP10 %in% utah_counties$county_code,]
ut_info<- data.frame(ut_data@data)
head(ut_info)
View(ut_info)
## TRY NEW PRECINCT SHAPE FILEA; https://gis.utah.gov/data/political/voter-precincts/
ut_precincts<- readOGR(dsn="VistaBallotAreas")
precinct_data<- data.frame(ut_precincts@data)
View(precinct_data)
map <- ggplot() + geom_polygon(data = ut_precincts, aes(x = long, y = lat, group = group)
, colour = "black", fill = NA) +
theme_void()
map
# Calculate dem percent for each race and precinct
slco_prop <- slco %>%
group_by(office) %>%
mutate(votes_cast = sum(votes))
View(slco_prop)
# Calculate dem percent for each race and precinct
slco_prop <- slco %>%
group_by(precinct, office) %>%
mutate(votes_cast = sum(votes))
# Calculate dem percent for each race and precinct
# filter out straight party since I know those are duplicated (futher analyses later!)
slco_prop <- slco %>%
filter(office != 'STRAIGHT PARTY') %>%
group_by(precinct, office) %>%
mutate(votes_cast = sum(votes))
# Calculate dem percent for each race and precinct
# filter out straight party since I know those are duplicated (futher analyses later!)
slco_prop <- slco %>%
filter(office != 'STRAIGHT PARTY') %>%
group_by(precinct, office) %>%
mutate(votes_cast = sum(votes),
candidate_pct = votes/sum(votes))
head(slco)
# Filter the spatial polygon just to the data we have so far
ut_data<- ut_precincts[ut_precincts@data$PrecinctID %in% slco_prop$precinct,]
length(unique(slco$precinct))
# Calculate dem percent for each race and precinct
# filter out straight party since I know those are duplicated (futher analyses later!)
slco_prop <- slco %>%
filter(office != 'STRAIGHT PARTY') %>%
group_by(precinct, office) %>%
mutate(votes_cast = sum(votes),
candidate_pct = votes/sum(votes),
precinct = as.factor(precinct))
# Calculate dem percent for each race and precinct
# filter out straight party since I know those are duplicated (futher analyses later!)
slco_prop <- slco %>%
filter(office != 'STRAIGHT PARTY') %>%
group_by(precinct, office) %>%
mutate(votes_cast = sum(votes),
candidate_pct = votes/sum(votes),
precinct_fct = as.factor(precinct))
# Filter the spatial polygon just to the data we have so far
ut_data<- ut_precincts[ut_precincts@data$PrecinctID %in% slco_prop$precinct_fct,]
table(ut_data@data$PrecinctID)
# Filter the spatial polygon just to the data we have so far
slco_precincts<- ut_precincts[ut_precincts@data$PrecinctID %in% slco_prop$precinct_fct,]
map <- ggplot() + geom_polygon(data = slco_precincts, aes(x = long, y = lat, group = group)
, colour = "black", fill = NA) +
theme_void()
map
# Filter the spatial polygon just to the data we have so far
slco_precincts<- ut_precincts[ut_precincts$PrecinctID %in% slco_prop$precinct_fct,]
# join the natality data with the county data.
tbl_slco_prop <- data.table(slco_prop)
library(data.table)
# join the natality data with the county data.
tbl_slco_prop <- data.table(slco_prop)
setkey(tbl_slco_prop,precinct)
# setup the geographies
slco_precincts<-slco_precincts@data
slco_precincts <- cbind(id=rownames(slco_precincts),slco_precincts)
str(slco_precincts)
setkey(slco_precincts,PrecinctID)
slco_precincts <- data.table(slco_precincts)
setkey(slco_precincts,PrecinctID)
# Filter the spatial polygon just to the data we have so far
slco_precincts<- ut_precincts[ut_precincts$PrecinctID %in% slco_prop$precinct_fct,]
slco_precincts<-slco_precincts@data
slco_precincts <- cbind(id=rownames(slco_precincts),slco_precincts)
slco_precincts <- data.table(slco_precincts)
setkey(slco_precincts,PrecinctID)
tbl_slco_prop <- data.table(slco_prop)
setkey(tbl_slco_prop,precinct)
precint_data <- slco_precincts[tbl_slco_prop]  # should be joined on fips
# Join the voting data with geographies (can only do one race at a time)
tbl_slco_prop <- slco_prop %>%
filter(race == "U.S. REPRESENTATIVE DISTRICT #4") %>%
data.table()
head(slco_prop)
# Join the voting data with geographies (can only do one race at a time)
tbl_slco_prop <- slco_prop %>%
filter(office == "U.S. REPRESENTATIVE DISTRICT #4") %>%
data.table()
setkey(tbl_slco_prop,precinct)
precint_data <- slco_precincts[tbl_slco_prop]  # should be joined on fips
str(precinct_data)
# make the map layer
map.df<-data.table(fortify(precinct_data))
setkey(map.df,precinctID)
head(map.df)
# make the map layer
map.df<-data.table(fortify(PrecinctID))
# make the map layer
map.df<-data.table(fortify(precinct_data))
setkey(map.df,PrecinctID)
# add in interesting data
map.df<- map.df[precinct_data]  # should be joined on ID
head(map.df)
View(map.df)
head(precinct_data)
setkey(precint_data, PrecinctID)
setkey(map.df,PrecinctID)
# add in interesting data
map.df<- map.df[precinct_data]  # should be joined on ID
# add in interesting data
map.df<- inner_join(precinct_data, by = 'PrecinctID')
# add in interesting data
map.df<- inner_join(precinct_data, map.df, by = 'PrecinctID')
head(map.df)
# Join the voting data with geographies (can only do one race at a time)
tbl_slco_prop <- slco_prop %>%
filter(office == "U.S. REPRESENTATIVE DISTRICT #4") %>%
data.table()
head(tbl_slco_prop)
# Calculate dem percent for each race and precinct
# filter out straight party since I know those are duplicated (futher analyses later!)
slco_prop <- slco %>%
filter(office != 'STRAIGHT PARTY') %>%
group_by(precinct, candidate, office) %>%
mutate(votes_cast = sum(votes),
candidate_pct = votes/sum(votes),
precinct_fct = as.factor(precinct))
head(slco)
# Calculate dem percent for each race and precinct
# filter out straight party since I know those are duplicated (futher analyses later!)
slco_prop <- slco %>%
filter(office != 'STRAIGHT PARTY') %>%
group_by(precinct, office) %>%
mutate(votes_cast = sum(votes)) %>%
ungroup() %>%
mutate(candidate_pct = votes/votes_cast)
head(slco_prop)
library(tigris)
library(leaflet)
library(rlist)
library(dplyr)
library(rgdal)    # for readOGR(...)
library(tidyverse)
library(data.table)
###################################################################3
# READ IN SLCO DATA from OpenElections
# #url<- "https://github.com/openelections/openelections-data-ut/raw/master/2018/20181106__ut__general__salt_lake__precinct.csv"
# #download.file(url, 'slco_districts.csv')
slco<- read.csv('slco_districts.csv', stringsAsFactors = F)
# Sanity check to make sure vote counts match elections website
slco %>%
filter(office %in% c('U.S. SENATE', 'PROPOSITION NUMBER 2',
'U.S. REPRESENTATIVE DISTRICT #4')) %>%
group_by(office, candidate) %>%
summarise(vote = sum(votes)) %>%
arrange(office, desc(vote))
# Good to know that straight party votes are duplicated in the races they counted in.
# Calculate dem percent for each race and precinct
# filter out straight party since I know those are duplicated (futher analyses later!)
slco_prop <- slco %>%
filter(office != 'STRAIGHT PARTY') %>%
group_by(precinct, office) %>%
mutate(votes_cast = sum(votes)) %>%
ungroup() %>%
mutate(candidate_pct = votes/votes_cast)
####################################################################
#MAPPING
## TRY NEW PRECINCT SHAPE FILEA; https://gis.utah.gov/data/political/voter-precincts/
ut.map<- readOGR(dsn="VistaBallotAreas")
# just to inspect what data we have going on here.
ut.map.data<- data.frame(ut_precincts@data)
# Filter the spatial polygon just to the data we have so far
slco.map<- ut_precincts[ut_precincts$PrecinctID %in% slco_prop$precinct_fct,]
map <- ggplot() +
geom_polygon(data = slco.map, aes(x = long, y = lat, group = group)
, colour = "black", fill = NA) +
theme_void()
# Filter the spatial polygon just to the data we have so far
slco.map<- ut.map.data[ut.map.data$PrecinctID %in% slco_prop$precinct_fct,]
# just to inspect what data we have going on here.
ut.map.data<- data.frame(ut.map@data)
# Filter the spatial polygon just to the data we have so far
slco.map<- ut.map.data[ut.map.data$PrecinctID %in% slco_prop$precinct_fct,]
# Calculate dem percent for each race and precinct
# filter out straight party since I know those are duplicated (futher analyses later!)
slco_prop <- slco %>%
filter(office != 'STRAIGHT PARTY') %>%
group_by(precinct, office) %>%
mutate(votes_cast = sum(votes)) %>%
ungroup() %>%
mutate(candidate_pct = votes/votes_cast,
precinct_fct = as.factor(precinct))
# Filter the spatial polygon just to the data we have so far
slco.map<- ut.map.data[ut.map.data$PrecinctID %in% slco_prop$precinct_fct,]
map <- ggplot() +
geom_polygon(data = slco.map, aes(x = long, y = lat, group = group)
, colour = "black", fill = NA) +
theme_void()
map
# Filter the spatial polygon just to the data we have so far
slco.map<- ut.map[ut.map$PrecinctID %in% slco_prop$precinct_fct,]
map <- ggplot() +
geom_polygon(data = slco.map, aes(x = long, y = lat, group = group)
, colour = "black", fill = NA) +
theme_void()
map
# setup the geographies with the interesting data
slco.map.data <- slco.map@data
slco.map.data2 <- cbind(id=rownames(slco.map.data),slco.map.data)
head(slco.map.data2)
slco.map.data3 <- data.table(slco.map.data2)
setkey(slco.map.data3,PrecinctID)
str(slco.map.data2)
head(slco_prop)
# Join the voting data with geographies (can only do one race at a time)
vote.data <- slco_prop %>%
filter(office == "U.S. REPRESENTATIVE DISTRICT #4") %>%
inner_join(slco.map.data2, by=c("precinct" = "PrecinctID"))
str(vote.data)
# Join the voting data with geographies (can only do one race at a time)
vote.data <- slco_prop %>%
filter(office == "U.S. REPRESENTATIVE DISTRICT #4") %>%
inner_join(slco.map.data2, by=c("precinct" = "PrecinctID")) %>%
fortify()
str(vote.data)
names(slco_prop)
table(slco_prop$candidate)
# Join the voting data with geographies (can only do one race at a time)
vote.data <- slco_prop %>%
filter(candidate == "BEN MCADAMS") %>%
inner_join(slco.map.data2, by=c("precinct" = "PrecinctID")) %>%
fortify()
ggplot(vote.data, aes(x=long, y=lat, group = group)) +
geom_polygon( aes( fill = candidate_pct)) +
coord_quickmap()+
coord_map("polyconic" ) +
theme_void()+
geom_polygon(data = us_states, aes(x=long, y=lat, group = group), color = "black", fill = NA)+
scale_fill_gradientn("",colours=brewer.pal(9,"YlGnBu"))
ggplot(vote.data, aes(x=long, y=lat, group = group)) +
geom_polygon( aes( fill = candidate_pct)) +
coord_quickmap()+
coord_map("polyconic" ) +
theme_void()+
# geom_polygon(data = us_states, aes(x=long, y=lat, group = group), color = "black", fill = NA)+
scale_fill_gradientn("",colours=brewer.pal(9,"YlGnBu"))
library(RColorBrewer)
ggplot(vote.data, aes(x=long, y=lat, group = group)) +
geom_polygon( aes( fill = candidate_pct)) +
coord_quickmap()+
coord_map("polyconic" ) +
theme_void()+
# geom_polygon(data = us_states, aes(x=long, y=lat, group = group), color = "black", fill = NA)+
scale_fill_gradientn("",colours=brewer.pal(9,"YlGnBu"))
map<- ggplot() +
geom_polygon(data=vote.data, aes(x=long, y=lat, group = group),
color = "gray", fill=candidate_pct)+
theme_void()
names(vote.data)
str(vote.data)
# Join the voting data with geographies (can only do one race at a time)
vote.data <- slco_prop %>%
filter(candidate == "BEN MCADAMS") %>%
inner_join(slco.map.data2, by=c("precinct" = "PrecinctID")) %>%
fortify()%>%
data.table()
map<- ggplot() +
geom_polygon(data=vote.data, aes(x=long, y=lat, group = group),
color = "gray", fill=candidate_pct)+
theme_void()
ggplot(vote.data, aes(x=long, y=lat, group = group)) +
geom_polygon( aes( fill = candidate_pct)) +
coord_quickmap()+
coord_map("polyconic" ) +
theme_void()+
# geom_polygon(data = us_states, aes(x=long, y=lat, group = group), color = "black", fill = NA)+
scale_fill_gradientn("",colours=brewer.pal(9,"YlGnBu"))
ggplot(vote.data, aes(x=long, y=lat, group = group)) +
geom_polygon( aes( fill = candidate_pct))
head(slco.map)
# Join the voting data with geographies (can only do one race at a time)
vote.data <- slco_prop %>%
filter(candidate == "BEN MCADAMS") %>%
inner_join(slco.map, by=c("precinct" = "PrecinctID"))
slco.map.tbl<- data.table(slco.map)
names(slco.map.tbl)
head(slco.map.tbl)
View(slco.map.tbl)
slco.map.tbl<- slco.map@data %>%
data.table()
head(slco.map.tbl)
# Calculate dem percent for each race and precinct
# filter out straight party since I know those are duplicated (futher analyses later!)
slco_prop <- slco %>%
filter(office != 'STRAIGHT PARTY') %>%
group_by(precinct, office) %>%
mutate(votes_cast = sum(votes)) %>%
ungroup() %>%
mutate(candidate_pct = votes/votes_cast,
precinct_fct = as.factor(precinct)) %>%
data.table() %>%
setkey(precinct)
vote.map<- slco.map.tbl[slco_prop]
# Calculate dem percent for each race and precinct
# filter out straight party since I know those are duplicated (futher analyses later!)
slco_prop <- slco %>%
filter(office != 'STRAIGHT PARTY') %>%
group_by(precinct, office) %>%
mutate(votes_cast = sum(votes)) %>%
ungroup() %>%
mutate(candidate_pct = votes/votes_cast,
precinct_fct = as.factor(precinct)) %>%
data.table(key = 'precinct')
slco.map.tbl<- slco.map@data %>%
data.table(key = 'PrecinctID')
vote.map<- slco.map.tbl[slco_prop]
table(slco.map.tbl$PrecinctID)
length(unique(slco.map.tbl$PrecinctID))
length(unique(slco_prop$precinct))
str(slco.map.tbl$PrecinctID)
str(slco_prop$precinct)
# Calculate dem percent for each race and precinct
# filter out straight party since I know those are duplicated (futher analyses later!)
slco_prop <- slco %>%
filter(office != 'STRAIGHT PARTY') %>%
group_by(precinct, office) %>%
mutate(votes_cast = sum(votes)) %>%
ungroup() %>%
mutate(candidate_pct = votes/votes_cast,
precinct_fct = as.factor(precinct)) %>%
data.table(key = 'precinct_fct')
vote.map<- slco.map.tbl[slco_prop]
slco.map.tbl<- slco.map@data %>%
data.table(key = 'PrecinctID')
vote.map<- slco.map.tbl[slco_prop]
str(slco.map.tbl)
str(slco_prop)
slco.map.tbl<- slco.map@data %>%
mutate(precinct = as.character(PrecinctID)) %>%
data.table(key = 'precinct')
vote.map<- slco.map.tbl[slco_prop]
vote.map<- slco.map.tbl[slco_prop, nomatch=0] # Nomatch clause makes this an inner join
