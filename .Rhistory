`Volume` = sum(Amount.Raised),
Revenue = round(sum(Amount.Raised) * .08, 2),
`Total Boosts` = sum(Boosts)) %>%
mutate(`Average Boost` = round(Volume /`Total Boosts`,2)) %>%
mutate(Source = 'Homepage') %>%
cbind(ga_homepage)
summary_se <- rallies_se %>%
summarise(`Published Rallies` = n(),
`Volume` = sum(Amount.Raised),
Revenue = round(sum(Amount.Raised) * .08, 2),
`Total Boosts` = sum(Boosts)) %>%
mutate(`Average Boost` = round(Volume /`Total Boosts`,2)) %>%
mutate(Source = '/Sportsengine') %>%
cbind(ga_se)
summary <- rbind(summary_homepage, summary_se) %>%
mutate(`Draft Conversion` = round((goal14Completions/Sessions)*100, 2),
`Publish Conversion` = round((`Published Rallies`/goal14Completions)*100, 2)) %>%
select(Source, Sessions, goal14Completions, `Draft Conversion`, `Published Rallies`,
`Publish Conversion`, `Total Boosts`, `Average Boost`, Volume, Revenue)
names(summary)[names(summary) == 'goal14Completions'] <- "Draft Rallies"
kable(summary, align = 'c')
summary
##Show the breakdown of sports that were published via each source.
sports_h <- rallies_homepage %>%
select(Sport) %>%
mutate(source = 'Homepage')
sports <- rallies_se %>%
select(Sport) %>%
mutate(source = '/Sportsengine') %>%
rbind(sports_h)
ggplot(sports, aes(x=Sport)) +
geom_histogram(stat = 'count') +
facet_wrap(~source) +
coord_flip()+
theme_minimal()
rallies_se$Average.Boost <- round(rallies_se$Average.Boost, 2)
kable(rallies_se)
rallies_homepage$Average.Boost <- round(rallies_homepage$Average.Boost, 2)
kable(rallies_homepage)
knitr::opts_chunk$set(echo = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(shiny, DT, tidyverse, gridExtra, dplyr, zoo, plotly, reshape, RGA, scales, lubridate, stringr, knitr)
`%not in%` <- function (x, table) is.na(match(x, table, nomatch=NA_integer_))
shiny::runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
if (!require("pacman")) install.packages("pacman")
pacman::p_load(shiny, DT, tidyverse, gridExtra, dplyr, zoo, plotly, reshape, RGA, scales, lubridate,
wesanderson)
#google analytics:
authorize()
profiles<-list_profiles()
#FYi, this is a handy tool: https://ga-dev-tools.appspot.com/query-explorer/
end_dt <- ymd(Sys.Date()) - days(1)
start_dt <- end_dt - days(30)
today <- ymd(Sys.Date())
first_dt <- mdy("12/2/2012")
##Set colors for graphing
rallyme_palette <- append(wes_palette("Zissou"), wes_palette("GrandBudapest"))
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
data<- get_ga(
profileId = "ga:65680666", start.date = start_dt, end.date = end_dt,
metrics = "ga:uniqueEvents",
dimensions = "ga:date, ga:eventCategory, ga:eventAction"
)%>%
filter(eventCategory == "Rallies",
eventAction == "Create a Draft") %>%
mutate(`Drafts Created` = uniqueEvents) %>%
select(date, `Drafts Created`)
data
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
data<- get_ga(
profileId = "ga:65680666", start.date = input$date_picker[1], end.date = input$date_picker[2],
metrics = "ga:uniqueEvents",
dimensions = "ga:date, ga:eventCategory, ga:eventAction"
)
str(data)
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
data.frame(data)
str(data.frame(data))
runApp('RallyMe/Dashboard/Draft Rallies')
runApp()
runApp('RallyMe/Dashboard/Draft Rallies')
str(data)
data<- get_ga(
profileId = "ga:65680666", start.date = start_dt, end.date = end_dt,
metrics = "ga:uniqueEvents",
dimensions = "ga:date, ga:eventCategory, ga:eventAction"
) %>%
filter(eventCategory == "Rallies",
eventAction == "Create a Draft") %>%
mutate(`Drafts Created` = uniqueEvents) %>%
select(date, `Drafts Created`)
data.frame(data)
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp()
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
profileId = "ga:65680666", start.date = start_dt, end.date = end_dt,
metrics = "ga:uniqueEvents",
dimensions = "ga:date, ga:eventCategory, ga:eventAction"
) %>%
filter(eventCategory == "Rallies",
eventAction == "Create a Draft") %>%
mutate(`Drafts Created` = uniqueEvents) %>%
select(date, `Drafts Created`)
profileId = "ga:65680666", start.date = start_dt, end.date = end_dt,
metrics = "ga:uniqueEvents",
dimensions = "ga:date, ga:eventCategory, ga:eventAction"
) %>%
filter(eventCategory == "Rallies",
eventAction == "Create a Draft") %>%
mutate(`Drafts Created` = uniqueEvents) %>%
select(date, `Drafts Created`)
drafts<- get_ga(
profileId = "ga:65680666", start.date = start_dt, end.date = end_dt,
metrics = "ga:uniqueEvents",
dimensions = "ga:date, ga:eventCategory, ga:eventAction"
) %>%
filter(eventCategory == "Rallies",
eventAction == "Create a Draft") %>%
mutate(`Drafts Created` = uniqueEvents) %>%
select(date, `Drafts Created`)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(shiny, DT, tidyverse, gridExtra, dplyr, zoo, plotly, reshape, RGA, scales, lubridate,
wesanderson)
#google analytics:
authorize()
profiles<-list_profiles()
#FYi, this is a handy tool: https://ga-dev-tools.appspot.com/query-explorer/
end_dt <- ymd(Sys.Date()) - days(1)
start_dt <- end_dt - days(30)
today <- ymd(Sys.Date())
drafts<- get_ga(
profileId = "ga:65680666", start.date = start_dt, end.date = end_dt,
metrics = "ga:uniqueEvents",
dimensions = "ga:date, ga:eventCategory, ga:eventAction"
) %>%
filter(eventCategory == "Rallies",
eventAction == "Create a Draft") %>%
mutate(`Drafts Created` = uniqueEvents) %>%
select(date, `Drafts Created`)
is.data.frame(drafts)
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp()
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
runApp('RallyMe/Dashboard/Draft Rallies')
shiny::runApp('RallyMe/Dashboard/Draft Rallies')
setwd("C:/Users/smits/Documents/RallyMe/Dashboard/Main Dashboard and data")
#Server.r for the rallyme dashboard
#-----------------------------
#  DECLARE CONSTANTS AND LOAD PACKAGES
#-----------------------------
if (!require("pacman")) install.packages("pacman")
pacman::p_load(shiny, DT, tidyverse, gridExtra, dplyr, zoo, plotly, reshape, RGA, scales, lubridate,
wesanderson)
#google analytics:
authorize()
profiles<-list_profiles()
#FYi, this is a handy tool: https://ga-dev-tools.appspot.com/query-explorer/
end_dt <- ymd(Sys.Date()) - days(1)
start_dt <- end_dt - days(30)
today <- ymd(Sys.Date())
first_dt <- mdy("12/2/2012")
##Set colors for graphing
rallyme_palette <- append(wes_palette("Zissou"), wes_palette("GrandBudapest"))
#-----------------------------
#  LOAD DATA
#-----------------------------
setwd("C:/Users/smits/Documents/RallyMe/Dashboard/Main Dashboard and data")
## Had to input Bill's file path.
rallies<- read.csv("data/rallies-report.csv") #presumably has more dates than active
old_payments <- read.csv("data/boosts-report_w mtn.csv")
new_payments <- read.csv("data/boosts-report.csv")
finance <- read.csv("data/finance_data.csv") ##Something happened with this .csv.
active<-read.csv("data/active_rallies.csv")
getwd()
knitr::opts_chunk$set(echo = TRUE)
sketch <- htmltools::withTags(table(
tableHeader(dt_test),
tableFooter(sapply(dt_test, function(x) if(is.numeric(x)) sum(x)))
))
library(htmltools)
sketch <- htmltools::withTags(table(
tableHeader(dt_test),
tableFooter(sapply(dt_test, function(x) if(is.numeric(x)) sum(x)))
))
library(DT)
sketch <- htmltools::withTags(table(
tableHeader(dt_test),
tableFooter(sapply(dt_test, function(x) if(is.numeric(x)) sum(x)))
))
dt_test <- structure(list(`pathologie principale` = c("Effet toxique des métaux",
"Autres résultats anormaux des examens chimiques du sang", "Néphrite tubulo-interstitielle chronique",
"Atteintes tubulo-interstitielles et tubulaires dues à des médicaments et des métaux lourds",
"Autres maladies     pulmonaires obstructives chroniques", "Autres résultats anormaux de l'examen des urines"
),     Fort = c(12L, 4L, 3L, 2L, 2L, 2L), Moyen = c(2L, 0L, 0L, 0L, 1L, 1L), Faible = c(4L, 0L, 0L, 0L, 4L, 0L)),
.Names = c("pathologie principale",                  "Fort", "Moyen", "Faible"), class = c("data.table", "data.frame"
), row.names = c(NA, -6L))
head(dt_test)
sketch <- htmltools::withTags(table(
tableHeader(dt_test),
tableFooter(sapply(dt_test, function(x) if(is.numeric(x)) sum(x)))
))
datatable(dt_test,
container = sketch,
rownames = F
)
tableHTML(mtcars)
library(tableHTML)
install.packages(tableHTML)
install.packages('tableHTML')
library(tableHTML)
tableHTML(mtcars)
tableHTML(mtcars, second_headers = list(c(3, 4, 5), c('col1', 'col2', 'col3')))
tableHTML(mtcars,
widths = c(rep(50, 6), rep(100, 6)),
second_headers = list(c(3, 4, 5), c('col1', 'col2', 'col3')))
tableHTML(mtcars, caption = 'This is a caption', footer = 'This is a footer')
tableHTML(mtcars,
row_groups = list(c(10, 10, 12), c('Group 1', 'Group 2', 'Group 3')),
widths = c(200, rep(50, 5), rep(100, 6)),
rownames = FALSE)
tableHTML(mtcars,
rownames = FALSE,
widths = c(140, rep(50, 11)),
row_groups = list(c(10, 10, 12), c('Group 1', 'Group 2', 'Group 3')),
second_headers = list(c(3, 4, 5), c('col1', 'col2', 'col3')))
tableHTML(mtcars,
rownames = FALSE,
widths = c(140, rep(50, 11)),
row_groups = list(c(10, 10, 12), c('Group 1', 'Group 2', 'Group 3')),
second_headers = list(c(3, 4), c('col1', 'col2')),
theme = 'scientific')
tableHTML(mtcars, theme = 'rshiny-blue', widths = c(140, rep(50, 11)))
tableHTML(mtcars, collapse = 'separate_shiny', spacing = '5px')
??tfooter
kable(mtcars)
library(kable)
install.packages('kable')
version()
r.version()
R.Version()
library("ggplot2")
data("diamonds")
p1 = ggplot(subset(diamonds, carat >= 2.2),
aes(x = table, y = price, colour = cut)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "loess", alpha = 0.1, size = 1, span = 1) +
theme_bw()
p2 = ggplot(subset(diamonds, carat > 2.2 & depth > 55 & depth < 70),
aes(x = depth, fill = cut)) +
geom_histogram(colour = "black", binwidth = 1, position = "dodge") +
theme_bw()
p1 + scale_color_d3()
p2 + scale_fill_d3()
library("ggsci")
p1 + scale_color_d3()
vignette("ggsci")
library(RCurl)
#load most recent rallies report.
setwd("C:/Users/smits/Documents/RallyMe/Dashboard/rallymeVis")
#load most recent rallies report.
setwd("C:/Users/smits/Documents/RallyMe/Dashboard/rallymeVis")
getwd()
#load most recent rallies report.
setwd("C:/Users/smits/Documents/RallyMe/Dashboard/rallymeVis")
#load most recent rallies report.
setwd("C:/Users/smits/Documents/RallyMe/Dashboard/rallymeVis"
getwd()
shiny::runApp(appDir = system.file("shiny/crimes", package = "ggiraph"), display.mode = "showcase")
shiny::runApp(appDir = system.file("shiny/cars", package = "ggiraph"), display.mode = "showcase")
shiny::runApp(appDir = system.file("shiny/iris", package = "ggiraph"), display.mode = "showcase")
shiny::runApp(appDir = system.file("shiny/iris", package = "ggiraph"), display.mode = "showcase")
shiny::runApp(appDir = system.file("shiny/crimes", package = "ggiraph"), display.mode = "showcase")
?rpart
??rpart
?predict
??prune
# Load the packages required to read XML files.
library("XML")
library("methods")
library(xpath)
# Give the input file name to the function.
result <- xmlTreeParse(file = "detail.xml")
rootnode <- xmlRoot(result) # Exract the root node form the xml file.
library("xpath")
install.packages("xpath")
setwd("~/GitHub/ut_cd4_house_race")
# Give the input file name to the function.
result <- xmlTreeParse(file = "detail.xml")
rootnode <- xmlRoot(result) # Exract the root node form the xml file.
names(rootnode) ## found objects!
names(rootnode[3])
rootnode[[5]][[1]] ## = voter turnout
#This extracts the nodeset
voter_turnout<- getNodeSet(rootnode,
"//VoterTurnout/Precincts")
voter_turnout<- getNodeSet(rootnode,
"//VoterTurnout/Precincts")
head(warnings())
# Get's the the results for CD4
## Will need to append the Straight party information as well.
cd4<- getNodeSet(rootnode, "//Contest[@key='45']")
library(tigris)
library(leaflet)
library(rlist)
library(dplyr)
library(rgdal)    # for readOGR(...)
library(ggplot2)
library("XML")
library("methods")
# Give the input file name to the function.
result <- xmlParse(file = "detail.xml")
rootnode <- xmlRoot(result) # Exract the root node form the xml file.
rootnode[[5]][[1]] ## = voter turnout
#This extracts the nodeset
voter_turnout<- getNodeSet(rootnode,
"//VoterTurnout/Precincts")
node<- voter_turnout[[1]][[1]]
node
voter<-xmlToDataFrame(node, collectNames = T, stringsAsFactors = F)
voter
voter<-xmlToDataFrame(node[[1]][[1]], collectNames = T, stringsAsFactors = F)
class(node)
library(xml2)
xml<- read_xml("detail.xml")
races_tidy3 <- xml %>%
xml_find_all('//Contest')
races_tidy3 <- xml %>%
xml_find_all('//Contest') %>%
map_df(~flatten(c(xml_attrs(.x),
map(xml_children(.x),
~set_names(as.list(xml_text(.x)), xml_name(.x)))))) %>%
type_convert()
library(tidyverse)
races_tidy3 <- xml %>%
xml_find_all('//Contest') %>%
map_df(~flatten(c(xml_attrs(.x),
map(xml_children(.x),
~set_names(as.list(xml_text(.x)), xml_name(.x)))))) %>%
type_convert()
races_tidy3
View(races_tidy3)
voter<-xmlToDataFrame(node[[1]][[1]], collectNames = T, stringsAsFactors = F)
xml_attrs(cd4[[1]][[6]])
# Get's the the results for CD4
## Will need to append the Straight party information as well.
cd4<- getNodeSet(rootnode, "//Contest[@key='45']")
xml_attrs(cd4[[1]][[6]])
xml_attrs(cd4[[1]])
xml_attrs(cd4)
races_tidy3 <- xml %>%
xml_find_all('//Contest')
races_tidy3
xml_attrs(races_tidy3)
?flatten
races_tidy3 <- xml %>%
xml_find_all('//Contest') %>%
map_df(~flatten(c(xml_attrs(.x),
map(xml_children(.x),
~set_names(as.list(xml_text(.x)), xml_name(.x)))))) %>%
type_convert()
races_tidy3
?xml_parent
races_tidy3 <- xml %>%
xml_find_all('//Contest')
races_tidy3[1]
races_tidy3[[1]][[1]]
xml_parent(races_tidy3[[1]][[1]])
races_tidy3 <- xml %>%
xml_find_all('//Choice') %>%
map_df(~flatten(c(xml_attrs(.x),
map(xml_children(.x),
~set_names(as.list(xml_text(.x)), xml_name(.x))),
map(xml_parent(.x),
~set_names(as.list(xml_text(.x)), xml_name(.x)))))) %>%
type_convert()
races_tidy3 <- xml %>%
xml_find_all('//Choice') %>%
map_df(~flatten(c(xml_attrs(.x),
map(xml_children(.x),
~set_names(as.list(xml_text(.x)), xml_name(.x))),
map(xml_parent(.x),
~set_names(as.list(xml_text(.x)), xml_name(.x)))))) %>%
type_convert()
races_tidy3 <- xml %>%
xml_find_all('//Choice') %>%
map_df(~flatten(c(xml_attrs(.x),
map(xml_children(.x),
~set_names(as.list(xml_text(.x)), xml_name(.x)))))) %>%
type_convert()
races_tidy3
races_tidy3 <- xml %>%
xml_find_all('//Choice') %>%
map_df(~flatten(c(xml_attrs(.x),
map(xml_parent(.x),
~set_names(as.list(xml_text(.x)), xml_name(.x)))))) %>%
type_convert()
contests<- xml %>%
xml_find_all('//Contest') %>%
xml_attrs(.x)
contests<- xml %>%
xml_find_all('//Contest') %>%
xml_attrs()
contests
contests<- xml %>%
xml_find_all('//Contest') %>%
xml_children()
contests
contests<- xml %>%
xml_find_all('//Contest') %>%
xml_children() %>%
length()
contests
contests<- xml %>%
xml_find_all('//Contest') %>%
xml_children()
contests
races_tidy3
races_tidy3 <- xml %>%
xml_find_all('//Contest') %>%
map_df(~flatten(c(xml_attrs(.x),
map(xml_children(.x),
~set_names(as.list(xml_text(.x)), xml_name(.x)))))) %>%
type_convert()
races_tidy3
xml %>%
xml_find_all('//Contest') %>%
xml_children()
races_tidy3 <- xml %>%
xml_find_all('//Contest') %>%
map_df(~flatten(c(xml_attrs(.x),
map(xml_children(.x),
~set_names(as.list(xml_text(.x)), xml_name(.x)))))) %>%
type_convert()
races_tidy3
races_tidy3 <- xml %>%
xml_find_all('/Choice') %>%
map_df(~flatten(c(xml_attrs(.x),
map(xml_children(.x),
~set_names(as.list(xml_text(.x)), xml_name(.x)))))) %>%
type_convert()
races_tidy3
races_tidy3 <- xml %>%
xml_find_all('//Choice') %>%
map_df(~flatten(c(xml_attrs(.x),
map(xml_children(.x),
~set_names(as.list(xml_text(.x)), xml_name(.x)))))) %>%
type_convert()
races_tidy3
races_tidy3 <- xml %>%
xml_find_all('//Contest')
races_tidy3
races_tidy3 <- xml %>%
xml_find_all('//Contest') %>%
xml_attrs()
races_tidy3
races_tidy3 <- xml %>%
xml_find_all('//Contest') %>%
map_df(~flatten(xml_attrs()))
races_tidy3 <- xml %>%
xml_find_all('//Contest') %>%
map_df(~flatten(xml_attrs(.x)))
races_tidy3 <- xml %>%
xml_find_all('//Contest') %>%
map_df(~flatten(c(xml_attrs(.x))))
races_tidy3 <- xml %>%
xml_find_all('//Contest') %>%
xml_attrs() %>%
flatten()
races_tidy3
races_tidy3 <- xml %>%
xml_find_all('//Contest') %>%
map_df(~flatten(c(xml_attrs(.x),
map(xml_children(.x),
~set_names(as.list(xml_text(.x)), xml_name(.x)))))) %>%
type_convert()
races_tidy3
